// Pull globals for individually compiled css files
@import '../globals/allGlobals';

/* ==========================================================================
    Typography -- Version: 1.9.0.1  - Compiled: #{timestamp()}
    ========================================================================== */

    @if variable-exists(google-fonts-url) {
      @import url($google-fonts-url);
    }

// Build Font-Face
@each $font-face-name, $font-face in $font-faces {

  $font-weight: 'normal';
  $font-style: 'normal';

  // check if we are passing a list
  @if (type-of($font-face) == list) {
    $font-weight: nth($font-face, 2);
    $font-style: if(length($font-face) == 3, nth($font-face, 3), 'normal');
  }

  // generate all font faces using their appropriate weights & styles
  @font-face {
    font-family: $font-face-name;
    src: url('#{$font-path}#{nth($font-face, 1)}.eot');
    src: url('#{$font-path}#{nth($font-face, 1)}.eot?') format('eot'),
    url('#{$font-path}#{nth($font-face, 1)}.woff') format('woff'),
    url('#{$font-path}#{nth($font-face, 1)}.ttf')  format('truetype');
    font-weight: $font-weight;
    font-style: $font-style;
  }

  // generate placeholders so we can extend when we need to use a font
  %#{$font-face-name} {
    @include font($font-face-name, $font-style, $font-weight);
  }
}

.base-font {
  font-family: $base-font;
}

.base-font-alt {
  font-family: $base-font-alt;
}

.arial {
  font-family: $arial;
}

.arialBold {
  font-family: $arial-bold;
}

/* ==========================
	  Body Text
   ========================== */

   .lede {
    @include font-size($lede-text);
  }

  .body-text {
    @include font-size($body-text);
  }

  .small-body-text {
    @include font-size($small-body-text);
  }

  .disclaimer-text {
    @include font-size($disclaimer-text);
  }

/* ==========================
	  Links
   ========================== */

   a {
    @include margin;
    @include padding;
    background: transparent;
    vertical-align: baseline;
    font-family: inherit;
    color: $link;
    text-decoration: none;
    cursor: pointer;
    @include transition;

    &:hover {
      color: $link-hover;
      text-decoration: underline;
    }

    img {
      border: 0 none;
      text-decoration: none;
    }

    &.muted,
    .muted & {
      color: $color-light-grey;
    }

    &[href$='.pdf']:after {
      @include font-family($fontawesome);
      content: ('\f1c1');
      margin-left: .5em;
    }

    // &[href*='github.com']:after {
    //   @include font-family($fontawesome);
    //   content: ('\f113');
    //   margin-left: .5em;
    // }
  }

/* ==========================
	  Headings
   ========================== */

  header {
  	text-align: center;
  }

  .heading {
    position: relative;
    @include inline-block;
    @include margin(0, 0, ($margin * 3));
    border: 2px solid currentColor;
    @include font-size(12);
    color: currentColor;
    text-align: center;
    text-transform: uppercase;
    line-height: normal;

    @include bp(bp-small) {
      width: 100%;
      @include margin($margin / 2, 0, $margin);
    }

    h2 {
      @include padding($padding / 4, $padding);
      @include margin;
    }

    p {
      position: absolute;
      top: -.5em;
      right: 0;
      left: 0;
      letter-spacing: 1px;
    }

    span {
      @include padding(0, 1em);
      @include rgba($color-white,1);
    }
  }

// Build Headings
%headings {
  clear: inherit;
  vertical-align: middle;
  line-height: normal;

  & + p,
  & + ul {
    margin-top: 1em;
  }
}

$i: 1;
@each $value in $heading-list {
  #{nth($value, 1)},
  .#{nth($value, 1)} {
    font-family: nth($value, 4);
    @include font-size(nth($value, 2));
    font-weight: nth($value, 3);
    @extend %headings;

    @if $i <= 3 {
      @include bp(bp-medium) {
        @include font-size(nth($value, 2) * .875)
      }

      @include bp(bp-small) {
        @include font-size(nth($value, 2) * .75)
      }
    }
  }
  $i: $i + 1 !global;
}

.h1,
.h2,
.h3,
.h4,
.h5,
.h6 {
  @include inline-block;
}

small {
  @include inline-block;
}

p,
ul,
ol,
dl,
blockquote {
  margin-bottom: $margin / 2;
  clear: inherit;
  vertical-align: middle;
}

p,
.p {
  font-family: $base-font;
  word-wrap: break-word;

  &:only-child {
    @include margin;
  }

  // article & {
  //   &:last-of-type:after {
  //     @include font-family($heading-font);
  //     content: 'FIN';
  //     color: $color-secondary-red;
  //     margin-left: .25em;
  //   }
  // }
}

.b {
  font-weight: $font-weight-semibold;
}

.light {
  font-weight: $font-weight-light;
}

.uppercase {
  text-transform: capitalize;
}

blockquote {
  width: 75%;
  @include margin(0, auto);
  border-left: 3px solid currentColor;
  color: $color-dark-grey;
  font-style: italic;
  padding-left: $padding;

  footer {
    background: none;
    color: currentColor;
  }
}

q {
  quotes: '\201C' '\201D' '\2018' '\2019';
}

abbr {
  border-bottom: 1px dotted currentColor;
  cursor: help;
}

address {
  font-style: normal;
}

sub, sup {
  font-size: smaller;
  line-height: 0;
  position: relative;
}

mark {
  @include padding(.25em);
  background: $color-primary-yellow;
}

time {
  @include inline-block;
}

/* ==========================
	  Pre
   ========================== */
   pre {
    @include margin($margin, 0, 0);
    @include padding($padding);
    @include border-radius;
    overflow: auto;
    word-wrap: break-word;
  }

  kbd,
  samp {
    font-family: $pre;
    color: $color-primary-green;
  }

  .valid,
  .is-valid {
    color: $color-primary-green;
  }

  .code-comment {
    @include opacity(.5);
  }

  .fa {
    @include font-family($fontawesome);
  }
